
local dir_path = (...):match("(.-)[^%.]+$")
local header_declarations = require(dir_path .. 'declarations.header_declarations')
local parser_declarations = require(dir_path .. 'declarations.parser_declarations')
local action_declarations = require(dir_path .. 'declarations.action_declarations')
local field_declarations  = require(dir_path .. 'declarations.field_declarations')
local calculated_field    = require(dir_path .. 'declarations.calculated_field_declaration')
local value_set           = require(dir_path .. 'declarations.value_set')
local counter             = require(dir_path .. 'declarations.counter')
local control_function    = require(dir_path .. 'declarations.control_function')
local register            = require(dir_path .. 'declarations.register')
local meter               = require(dir_path .. 'declarations.meter')
local table               = require(dir_path .. 'declarations.table')
local extern              = require(dir_path .. 'declarations.extern')

return {
	HeaderType                      = header_declarations.HeaderType,
	HeaderInstance                  = header_declarations.HeaderInstance,
	ActionFunctionDeclaration       = action_declarations.ActionFunctionDeclaration,
	ParamQualifier                     = action_declarations.ParamQualifier,
	ActionProfileDeclaration        = action_declarations.ActionProfileDeclaration,
	ActionSelectorDeclaration       = action_declarations.ActionSelectorDeclaration,
	PrimitiveActionDeclaration      = action_declarations.PrimitiveActionDeclaration,
	ActionSpecification             = action_declarations.ActionSpecification,
	DynamicActionSelection          = action_declarations.DynamicActionSelection,
	Size                            = action_declarations.Size,
	ParserFunctionDeclaration       = parser_declarations.ParserFunctionDeclaration,
	ReturnOrDrop                    = parser_declarations.ReturnOrDrop,
	ParserExceptionDeclaration      = parser_declarations.ParserExceptionDeclaration,
	SetStatement                    = parser_declarations.SetStatement,
	ExtractStatement                = parser_declarations.ExtractStatement,
	ReturnStatement                 = parser_declarations.ReturnStatement,
	SelectStatement                 = parser_declarations.SelectStatement,
	FieldListDeclaration            = field_declarations.FieldListDeclaration,
	FieldListCalculationDeclaration = field_declarations.FieldListCalculationDeclaration,
	Input                           = field_declarations.Input,
	Algorithm                       = field_declarations.Algorithm,
	OutputWidth                     = field_declarations.OutputWidth,
	CalculatedFieldDeclaration      = calculated_field.CalculatedFieldDeclaration,
	UpdateVerifySpec                = calculated_field.UpdateVerifySpec,
	IfCond                          = calculated_field.IfCond,
	Valid                           = calculated_field.Valid,
	ValueSetDeclaration             = value_set.ValueSetDeclaration,
	CounterDeclaration              = counter.CounterDeclaration,
	TypeStatement                 = counter.TypeStatement,
	CounterType                     = counter.CounterType,
	DirectOrStatic                  = counter.DirectOrStatic,
	InstanceCount                   = counter.InstanceCount,
	MinWidth                        = counter.MinWidth,
	Saturating                      = counter.Saturating,
	MeterDeclaration                = meter.MeterDeclaration,
	Result                          = meter.Result,
	RegisterDeclaration             = register.RegisterDeclaration,
	WidthDeclaration                = register.WidthDeclaration,
	LayoutDeclaration               = register.LayoutDeclaration,
	ControlFunctionDeclaration      = control_function.ControlFunctionDeclaration,
	ApplyCall                       = control_function.ApplyCall,
	Hit                             = control_function.Hit,
	Miss                            = control_function.Miss,
	TableDeclaration                = table.TableDeclaration,
	Reads                           = table.Reads,
	MinSize                         = table.MinSize,
	MaxSize                         = table.MaxSize,
	SupportTimeout                  = table.SupportTimeout,
	ActionProfile                   = table.ActionProfile,
	ExternTypeDeclaration           = extern.ExternTypeDeclaration,
	ExternInstanceDeclaration       = extern.ExternInstanceDeclaration,
	AttributeDeclaration            = extern.AttributeDeclaration,
	MethodDeclaration               = extern.MethodDeclaration,
	Optional                        = extern.Optional,
}
