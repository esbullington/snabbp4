local class              = require("snabbp4.syntax.utils.middleclass")
local utils              = require("snabbp4.syntax.utils.debug")
-- precedence values
local precedence         = require("snabbp4.syntax.precedence")
-- symbols
local value_symbols      = require("snabbp4.syntax.symbols.values")
local op_symbols         = require("snabbp4.syntax.symbols.ops")
local punctuator_symbols = require("snabbp4.syntax.symbols.punctuators")
-- statements/top-level declarations
local statements         = require("snabbp4.syntax.symbols.statements")
local declarations       = require("snabbp4.syntax.symbols.declarations")

return {
		UnsignedValue                   = value_symbols.UnsignedValue,
		ConstantValue                   = value_symbols.ConstantValue,
		BooleanValue                    = value_symbols.BooleanValue,
		DataType                        = value_symbols.DataType,
		Identifier                      = value_symbols.Identifier,
		Latest                          = value_symbols.Latest,
		Next                            = value_symbols.Next,
		ParserError                     = value_symbols.ParserError,
		Default                         = value_symbols.Default,
		Add                             = op_symbols.Add,
		Subtract                        = op_symbols.Subtract,
		Multiply                        = op_symbols.Multiply,
		Divide                          = op_symbols.Divide,
		LShift                          = op_symbols.LShift,
		RShift                          = op_symbols.RShift,
		LogicalAnd                      = op_symbols.LogicalAnd,
		LogicalOr                       = op_symbols.LogicalOr,
		BitwiseAnd                      = op_symbols.BitwiseAnd,
		BitwiseOr                       = op_symbols.BitwiseOr,
		BitwiseExclusiveOr              = op_symbols.BitwiseExclusiveOr,
		Accessor                        = op_symbols.Accessor,
		Call                            = op_symbols.Call,
		Colon                           = punctuator_symbols.Colon,
		Comma                           = punctuator_symbols.Comma,
		LBrace                          = punctuator_symbols.LBrace,
		RBrace                          = punctuator_symbols.RBrace,
		LParen                          = punctuator_symbols.LParen,
		RParen                          = punctuator_symbols.RParen,
		Semicolon                       = punctuator_symbols.Semicolon,
		EndToken                        = punctuator_symbols.EndToken,
		Length                          = statements.Length,
		FieldDeclaration                = statements.FieldDeclaration,
		MetadataInstance                = statements.MetadataInstance,
		ParserFunctionDeclaration       = declarations.ParserFunctionDeclaration,
		ReturnOrDrop                    = declarations.ReturnOrDrop,
		ParserExceptionDeclaration      = declarations.ParserExceptionDeclaration,
		SetStatement                    = declarations.SetStatement,
		ExtractStatement                = declarations.ExtractStatement,
		ReturnStatement                 = declarations.ReturnStatement,
		SelectStatement                 = declarations.SelectStatement,
		HeaderType                      = declarations.HeaderType,
		HeaderInstance                  = declarations.HeaderInstance,
		ActionFunctionDeclaration       = declarations.ActionFunctionDeclaration,
		ActionProfileDeclaration        = declarations.ActionProfileDeclaration,
		ParamQualifier                     = declarations.ParamQualifier,
		ActionSelectorDeclaration       = declarations.ActionSelectorDeclaration,
		PrimitiveActionDeclaration      = declarations.PrimitiveActionDeclaration,
		ActionSpecification             = declarations.ActionSpecification,
		DynamicActionSelection          = declarations.DynamicActionSelection,
		Size                            = declarations.Size,
		FieldListDeclaration            = declarations.FieldListDeclaration,
		FieldListCalculationDeclaration = declarations.FieldListCalculationDeclaration,
		Input                           = declarations.Input,
		Algorithm                       = declarations.Algorithm,
		OutputWidth                     = declarations.OutputWidth,
		CalculatedFieldDeclaration      = declarations.CalculatedFieldDeclaration,
		UpdateVerifySpec                = declarations.UpdateVerifySpec,
		IfCond                          = declarations.IfCond,
		Valid                           = declarations.Valid,
		ValueSetDeclaration             = declarations.ValueSetDeclaration,
		CounterDeclaration              = declarations.CounterDeclaration,
		TypeStatement                 = declarations.TypeStatement,
		CounterType                     = declarations.CounterType,
		DirectOrStatic                  = declarations.DirectOrStatic,
		InstanceCount                   = declarations.InstanceCount,
		MinWidth                        = declarations.MinWidth,
		Saturating                      = declarations.Saturating,
		MeterDeclaration                = declarations.MeterDeclaration,
		Result                          = declarations.Result,
		RegisterDeclaration             = declarations.RegisterDeclaration,
		WidthDeclaration                = declarations.WidthDeclaration,
		LayoutDeclaration               = declarations.LayoutDeclaration,
		ControlFunctionDeclaration      = declarations.ControlFunctionDeclaration,
		ApplyCall                       = declarations.ApplyCall,
		Hit                             = declarations.Hit,
		Miss                            = declarations.Miss,
		TableDeclaration                = declarations.TableDeclaration,
		Reads                           = declarations.Reads,
		MinSize                         = declarations.MinSize,
		MaxSize                         = declarations.MaxSize,
		SupportTimeout                  = declarations.SupportTimeout,
		ActionProfile                   = declarations.ActionProfile,
		ExternTypeDeclaration           = declarations.ExternTypeDeclaration,
		ExternInstanceDeclaration       = declarations.ExternInstanceDeclaration,
		AttributeDeclaration            = declarations.AttributeDeclaration,
		MethodDeclaration               = declarations.MethodDeclaration,
		Optional                        = declarations.Optional,
}
