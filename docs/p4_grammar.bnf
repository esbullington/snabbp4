
p4_program ::= p4_declaration +

p4_declaration ::=
	header_type_declaration |
	header_instance_declaration |
	field_list_declaration |
	field_list_calculation_declaration |
	calculated_field_declaration |
	value_set_declaration |
	parser_function_declaration |
	parser_exception_declaration |
	action_function_declaration |
	primitive_action_declaration |
	action_profile_declaration |
	counter_declaration |
	meter_declaration |
	register_declaration |
	control_function_declaration |
	table_declaration |
	action_selector_declaration |

	extern_type_declaration |
	extern_instance_declaration |

const_value ::=
	bool_value |
	[ "+" | - ] [ width_spec ] unsigned_value

unsigned_value ::=
	binary_value |
	decimal_value |
	hexadecimal_value

bool_value ::= true | false

binary_value ::= binary_base binary_digit+

decimal_value ::= decimal_digit+

hexadecimal_value ::= hexadecimal_base hexadecimal_digit+

binary_base ::= 0b | 0B

hexadecimal_base ::= 0x | 0X

binary_digit ::= _ | 0 | 1

decimal_digit ::= binary_digit | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

hexadecimal_digit ::=
	decimal_digit | a | A | b | B | c | C | d | D | e | E | f | F

width_spec ::= decimal_digit+ [ w | s ]

field_value ::= const_value

type_spec ::=
	header [ header_type_name ] |
	metadata [ header_type_name ] |
	field_list |
	field_list_calculation |
	parser |
	parser_exception |
	parser_value_set |
	counter |
	meter |
	register |
	action |
	action_profile |
	table |
	control |
	extern [ extern_type_name ] |
	data_type

data_type ::=
	bit |
	bit < decimal_digit+ > |
	varbit < decimal_digit+ > |
	int < decimal_digit+ >

object_ref ::=
	instance_name |
	header_ref |
	field_ref

general_expr ::=
	bool_expr | arith_expr | object_ref

bool_expr ::=
	valid ( object_ref ) | bool_expr bool_op bool_expr |
	not bool_expr | ( bool_expr ) | arith_expr rel_op arith_expr |
	bool_value

arith_expr ::=
	object_ref | value |
	max ( arith_expr , arith_expr ) | min ( arith_expr , arith_expr ) |
	( arith_expr ) | arith_expr bin_op arith_expr | un_op arith_expr |
	( data_type ) arith_expr

bin_op ::= "+" | "*" | - | << | >> | & | "|" | ^

un_op ::= ~ | -

bool_op ::= or | and

rel_op ::= > | >= | == | <= | < | !=
	header_type_declaration ::=
	header_type header_type_name { header_dec_body }

header_dec_body ::=
	fields { field_dec * }
	[ length : length_exp ; ]

field_dec ::= data_type field_name ;

length_bin_op ::= "+" | - | "*" | << | >>

length_exp ::=
	const_value |
	field_name |
	length_exp length_bin_op length_exp |
	( length_exp )

header_instance_declaration ::= header_instance | metadata_instance

header_instance ::= scalar_instance | array_instance

scalar_instance ::= header header_type_name instance_name ;

array_instance ::=
	header header_type_name
	instance_name "[" const_value "]" ;

metadata_instance ::=
	metadata header_type_name
	instance_name [ metadata_initializer ] | ;

metadata_initializer ::= { [ field_name : field_value ; ] + }

header_ref ::= header_instance_name | header_instance_name "[" index "]"

index ::= const_value | last | next

field_ref ::= header_ref . field_name

field_list_declaration ::=
	field_list field_list_name {
		[ field_list_entry ; ] *
	}

field_list_entry ::=
	object_ref | field_value

field_list_calculation_declaration ::=
	field_list_calculation field_list_calculation_name {
		input {
			[ field_list_name ; ] +
		}
		algorithm : stream_function_algorithm_name ;
		output_width : const_value ;
	}

calculated_field_declaration ::=
	calculated_field field_ref { update_verify_spec + }

update_verify_spec ::=
	update_or_verify field_list_calculation_name [ if_cond ] ;

update_or_verify ::= update | verify

if_cond ::= if ( calc_bool_cond )

calc_bool_cond ::=
	valid ( header_ref | field_ref ) |
	field_ref == field_value

value_set_declaration ::= parser_value_set value_set_name;

parser_function_declaration ::=
	parser parser_state_name { parser_function_body }

parser_function_body ::=
	parser_body_call*
	return_statement

parser_body_call ::=
	extract_statement |
	set_statement |
	extern_method_call ;

extract_statement ::= extract ( header_extract_ref );

header_extract_ref ::=
	header_instance_name |
	header_instance_name "[" header_extract_index "]"

header_extract_index ::= const_value | next

set_statement ::= set_metadata ( field_ref, general_expr ) ;

return_statement ::=
	return_value_type |
	return select ( select_exp ) { case_entry + }

return_value_type ::=
	return parser_state_name ; |
	return control_function_name ; |
	parse_error parser_exception_name ;

case_entry ::= value_list : case_return_value_type ;

value_list ::= value_or_masked [ , value_or_masked ]* | default

case_return_value_type ::=
	parser_state_name |
	control_function_name |
	parse_error parser_exception_name

value_or_masked ::=
	field_value | field_value mask field_value | value_set_name |
	( value_or_masked [, value_or_masked] * )

select_exp ::= field_or_data_ref [, field_or_data_ref] *

field_or_data_ref ::=
	field_ref |
	latest.field_name |
	current( const_value , const_value )

parser_exception_declaration ::=
	parser_exception parser_exception_name {
		set_statement *
		return_or_drop ;
	}

return_or_drop ::= return_to_control | parser_drop

return_to_control ::= return control_function_name

counter_declaration ::=
	counter counter_name {
		type : counter_type ;
		[ direct_or_static ; ]
		[ instance_count : const_value ; ]
		[ min_width : const_value ; ]
		[ saturating ; ]
	}

counter_type ::= bytes | packets

direct_or_static ::= direct_attibute | static_attribute

direct_attribute ::= direct : table_name

static_attribute ::= static : table_name

meter_declaration ::=
	meter meter_name {
	type : meter_type ;
	result : field_ref ;
		[ direct_or_static ; ]
		[ instance_count : const_value ; ]
	}

meter_type ::= bytes | packets

register_declaration ::=
	register register_name {
		width_or_layout ;
		[ direct_or_static ; ]
		[ instance_count : const_value ; ]
		[ attribute_list ; ]
	}

width_or_layout ::= width_declaration | layout_declaration

width_declaration ::= width : const_value ;

layout_declaration ::= layout : header_type_name ;

attribute_list ::= attributes : attr_entry

attr_entry ::= signed | attr_entry , attr_entry

register_ref ::=
	register_name "[" const_value "]" [.field_name]

	primitive_action_declaration ::=
	primitive_action action_name ( [ simple_param_list ] ) ;

simple_param_list ::= param_name [, param_name]*

compound_action_function_declaration ::=
	action action_name ( [ action_param_list ] ) { action_statement + } |
	action action_name ( [ action_param_list ] ) ;

action_param_list ::= action_param [, action_param]*

action_param ::= param_qualifier* data_type param_name

param_qualifier ::= in | inout

action_statement ::=
	action_name ( [ arg_list ] ) ; |
	extern_method_call ;

arg_list ::= general_expr [, general_expr]*

action_profile_declaration ::=
	action_profile action_profile_name {
		action_specification
		[ size : const_value ; ]
		[ dynamic_action_selection : selector_name ; ]
	}

action_specification ::=
	actions { [ action_name ] + }

action_selector_declaration ::=
	action_selector selector_name {
	selection_key : field_list_calculation_name ;
	}

table_declaration ::=
	table table_name {
		[ reads { field_match + } ]
		table_actions
		[ min_size : const_value ; ]
		[ max_size : const_value ; ]
		[ size : const_value ; ]
		[ support_timeout : bool_value ; ]
	}

field_match ::= field_or_masked_ref : field_match_type ;

field_or_masked_ref ::=
	header_ref | field_ref | field_ref mask const_value

field_match_type ::= exact | ternary | lpm | index | range | valid

table_actions ::=
	action_specification | action_profile_specification

	action_specification ::=
	actions { [ action_name ; ] + }

	action_profile_specification ::=
	action_profile : action_profile_name

	control_function_declaration ::=
	control control_fn_name control_block

control_block ::= { control_statement * }

control_statement ::=
	apply_call |
	apply_and_select_block |
	extern_method_call ; |
	if_else_statement |
	control_fn_name ( ) ; |
	return ;

apply_call ::= apply ( table_name ) ;

apply_and_select_block ::= apply ( table_name ) { [ case_list ] }

case_list ::= action_case + | hit_miss_case +

action_case ::= action_or_default control_block

action_or_default ::= action_name | default

hit_miss_case ::= hit_or_miss control_block

hit_or_miss ::= hit | miss

if_else_statement ::=
	if ( bool_expr ) control_block
	[ else_block ]

else_block ::= else control_block | else if_else_statement

extern_type_declaration ::=
	extern_type type_name {
		member_declaration*
	}

member_declaration ::= attribute_declaration | method_declaration

method_declaration ::=
	method method_name ( method_param_list );

method_param_list ::= method_param [, method_param]*

method_param ::= param_qualifier* type_spec param_name

attribute_declaration ::=
	attribute attribute_name {
	type : attribute_type ;
				 [ optional ; ]
	}

identifier_list ::= variable_name ;

attribute_type ::= type_spec

extern_instance_declaration ::=
	extern type_name instance_name ; |
	extern type_name instance_name {
		extern_attribute_binding +
	}

extern_attribute_binding ::=
	attribute_name : object_ref ;

extern_method_call ::=
	object_ref . method_name ( arg_list )
